
__constant int gWindowWidth = 512;
__constant int gWindowHeight = 512;
__constant int gNumGenerators = 7;
__constant float cosTable[1024] = {1, 0.999981, 0.999925, 0.999831, 0.999699, 0.999529, 0.999322, 0.999078, 0.998795, 0.998476, 0.998118, 0.997723, 0.99729, 0.99682, 0.996313, 0.995767, 0.995185, 0.994565, 0.993907, 0.993212, 0.99248, 0.99171, 0.990903, 0.990058, 0.989177, 0.988258, 0.987301, 0.986308, 0.985278, 0.98421, 0.983105, 0.981964, 0.980785, 0.97957, 0.978317, 0.977028, 0.975702, 0.974339, 0.97294, 0.971504, 0.970031, 0.968522, 0.966976, 0.965394, 0.963776, 0.962121, 0.960431, 0.958703, 0.95694, 0.955141, 0.953306, 0.951435, 0.949528, 0.947586, 0.945607, 0.943594, 0.941544, 0.939459, 0.937339, 0.935184, 0.932993, 0.930767, 0.928506, 0.92621, 0.92388, 0.921514, 0.919114, 0.916679, 0.91421, 0.911706, 0.909168, 0.906596, 0.903989, 0.901349, 0.898675, 0.895966, 0.893224, 0.890449, 0.88764, 0.884797, 0.881921, 0.879012, 0.87607, 0.873095, 0.870087, 0.867046, 0.863973, 0.860867, 0.857729, 0.854558, 0.851355, 0.848121, 0.844854, 0.841555, 0.838225, 0.834863, 0.83147, 0.828045, 0.824589, 0.821103, 0.817585, 0.814036, 0.810457, 0.806848, 0.803208, 0.799537, 0.795837, 0.792107, 0.788346, 0.784557, 0.780737, 0.776888, 0.77301, 0.769103, 0.765167, 0.761202, 0.757209, 0.753187, 0.749136, 0.745058, 0.740951, 0.736816, 0.732654, 0.728464, 0.724247, 0.720002, 0.715731, 0.711432, 0.707107, 0.702754, 0.698376, 0.693971, 0.68954, 0.685083, 0.680601, 0.676092, 0.671559, 0.667, 0.662415, 0.657806, 0.653172, 0.648514, 0.643831, 0.639124, 0.634393, 0.629638, 0.624859, 0.620057, 0.615231, 0.610382, 0.60551, 0.600616, 0.595699, 0.590759, 0.585797, 0.580813, 0.575808, 0.57078, 0.565731, 0.560661, 0.555569, 0.550457, 0.545324, 0.540171, 0.534997, 0.529803, 0.524589, 0.519355, 0.514102, 0.508829, 0.503537, 0.498227, 0.492897, 0.487549, 0.482183, 0.476798, 0.471396, 0.465975, 0.460538, 0.455083, 0.44961, 0.444121, 0.438615, 0.433093, 0.427554, 0.421999, 0.416428, 0.410842, 0.40524, 0.399623, 0.393991, 0.388344, 0.382682, 0.377006, 0.371316, 0.365612, 0.359894, 0.354162, 0.348417, 0.342659, 0.336888, 0.331105, 0.325309, 0.319501, 0.31368, 0.307848, 0.302004, 0.296149, 0.290283, 0.284406, 0.278518, 0.27262, 0.266711, 0.260792, 0.254864, 0.248926, 0.242978, 0.237022, 0.231056, 0.225082, 0.219099, 0.213108, 0.207109, 0.201103, 0.195088, 0.189067, 0.183038, 0.177002, 0.17096, 0.164911, 0.158856, 0.152795, 0.146728, 0.140656, 0.134579, 0.128496, 0.122408, 0.116316, 0.11022, 0.104119, 0.0980149, 0.0919067, 0.085795, 0.0796801, 0.0735622, 0.0674416, 0.0613184, 0.0551929, 0.0490653, 0.0429358, 0.0368048, 0.0306723, 0.0245388, 0.0184042, 0.012269, 0.00613336, -2.54711e-06, -0.00613845, -0.0122741, -0.0184093, -0.0245438, -0.0306774, -0.0368099, -0.0429409, -0.0490704, -0.0551979, -0.0613235, -0.0674466, -0.0735673, -0.0796852, -0.0858001, -0.0919118, -0.09802, -0.104124, -0.110225, -0.116321, -0.122414, -0.128501, -0.134584, -0.140661, -0.146733, -0.1528, -0.158861, -0.164916, -0.170965, -0.177007, -0.183043, -0.189072, -0.195093, -0.201108, -0.207114, -0.213113, -0.219104, -0.225087, -0.231061, -0.237027, -0.242983, -0.248931, -0.254869, -0.260797, -0.266716, -0.272625, -0.278523, -0.284411, -0.290288, -0.296154, -0.302009, -0.307853, -0.313685, -0.319505, -0.325314, -0.33111, -0.336893, -0.342664, -0.348422, -0.354167, -0.359898, -0.365616, -0.371321, -0.377011, -0.382687, -0.388348, -0.393995, -0.399628, -0.405245, -0.410847, -0.416433, -0.422004, -0.427559, -0.433097, -0.43862, -0.444126, -0.449615, -0.455087, -0.460542, -0.46598, -0.4714, -0.476803, -0.482187, -0.487554, -0.492902, -0.498231, -0.503542, -0.508834, -0.514106, -0.519359, -0.524593, -0.529807, -0.535001, -0.540175, -0.545328, -0.550461, -0.555574, -0.560665, -0.565735, -0.570784, -0.575812, -0.580817, -0.585801, -0.590763, -0.595703, -0.60062, -0.605515, -0.610386, -0.615235, -0.620061, -0.624863, -0.629642, -0.634397, -0.639128, -0.643835, -0.648518, -0.653176, -0.65781, -0.662419, -0.667003, -0.671562, -0.676096, -0.680604, -0.685087, -0.689544, -0.693975, -0.69838, -0.702758, -0.70711, -0.711436, -0.715734, -0.720006, -0.72425, -0.728468, -0.732658, -0.73682, -0.740954, -0.745061, -0.74914, -0.75319, -0.757212, -0.761206, -0.765171, -0.769107, -0.773014, -0.776892, -0.78074, -0.78456, -0.78835, -0.79211, -0.79584, -0.79954, -0.803211, -0.806851, -0.81046, -0.814039, -0.817588, -0.821106, -0.824592, -0.828048, -0.831473, -0.834866, -0.838228, -0.841558, -0.844856, -0.848123, -0.851358, -0.854561, -0.857731, -0.86087, -0.863976, -0.867049, -0.87009, -0.873098, -0.876073, -0.879015, -0.881924, -0.8848, -0.887642, -0.890451, -0.893227, -0.895969, -0.898677, -0.901351, -0.903992, -0.906598, -0.90917, -0.911708, -0.914212, -0.916681, -0.919116, -0.921516, -0.923882, -0.926212, -0.928508, -0.930769, -0.932995, -0.935186, -0.937341, -0.939461, -0.941546, -0.943595, -0.945609, -0.947588, -0.94953, -0.951437, -0.953308, -0.955143, -0.956942, -0.958705, -0.960432, -0.962123, -0.963778, -0.965396, -0.966978, -0.968524, -0.970033, -0.971505, -0.972941, -0.974341, -0.975704, -0.97703, -0.978319, -0.979571, -0.980787, -0.981965, -0.983107, -0.984211, -0.985279, -0.986309, -0.987302, -0.988259, -0.989177, -0.990059, -0.990903, -0.991711, -0.99248, -0.993213, -0.993908, -0.994565, -0.995185, -0.995768, -0.996313, -0.996821, -0.997291, -0.997724, -0.998119, -0.998476, -0.998796, -0.999078, -0.999323, -0.99953, -0.999699, -0.999831, -0.999925, -0.999981, -1, -0.999981, -0.999925, -0.99983, -0.999699, -0.999529, -0.999322, -0.999077, -0.998795, -0.998475, -0.998118, -0.997723, -0.99729, -0.99682, -0.996312, -0.995767, -0.995184, -0.994564, -0.993906, -0.993211, -0.992479, -0.991709, -0.990902, -0.990057, -0.989175, -0.988256, -0.9873, -0.986307, -0.985276, -0.984209, -0.983104, -0.981962, -0.980784, -0.979568, -0.978316, -0.977027, -0.9757, -0.974338, -0.972938, -0.971502, -0.970029, -0.96852, -0.966974, -0.965392, -0.963774, -0.962119, -0.960428, -0.958701, -0.956938, -0.955139, -0.953304, -0.951433, -0.949526, -0.947583, -0.945605, -0.943591, -0.941541, -0.939456, -0.937336, -0.935181, -0.93299, -0.930764, -0.928503, -0.926207, -0.923876, -0.921511, -0.919111, -0.916676, -0.914206, -0.911703, -0.909165, -0.906592, -0.903986, -0.901345, -0.898671, -0.895963, -0.893221, -0.890445, -0.887636, -0.884793, -0.881917, -0.879008, -0.876066, -0.873091, -0.870083, -0.867042, -0.863969, -0.860863, -0.857724, -0.854554, -0.851351, -0.848116, -0.844849, -0.84155, -0.83822, -0.834858, -0.831465, -0.82804, -0.824584, -0.821098, -0.81758, -0.814031, -0.810452, -0.806842, -0.803202, -0.799532, -0.795832, -0.792101, -0.788341, -0.784551, -0.780732, -0.776883, -0.773005, -0.769098, -0.765161, -0.761197, -0.757203, -0.753181, -0.74913, -0.745052, -0.740945, -0.73681, -0.732648, -0.728458, -0.724241, -0.719996, -0.715724, -0.711426, -0.7071, -0.702748, -0.69837, -0.693965, -0.689534, -0.685077, -0.680594, -0.676086, -0.671552, -0.666993, -0.662409, -0.6578, -0.653166, -0.648507, -0.643824, -0.639117, -0.634386, -0.629631, -0.624852, -0.62005, -0.615224, -0.610375, -0.605503, -0.600609, -0.595692, -0.590752, -0.58579, -0.580806, -0.5758, -0.570773, -0.565724, -0.560654, -0.555562, -0.55045, -0.545317, -0.540163, -0.534989, -0.529795, -0.524581, -0.519348, -0.514094, -0.508822, -0.50353, -0.498219, -0.492889, -0.487541, -0.482175, -0.47679, -0.471388, -0.465968, -0.46053, -0.455075, -0.449602, -0.444113, -0.438607, -0.433085, -0.427546, -0.421991, -0.41642, -0.410834, -0.405232, -0.399615, -0.393983, -0.388336, -0.382674, -0.376998, -0.371308, -0.365603, -0.359885, -0.354154, -0.348409, -0.342651, -0.33688, -0.331096, -0.3253, -0.319492, -0.313672, -0.30784, -0.301996, -0.296141, -0.290275, -0.284397, -0.278509, -0.272611, -0.266702, -0.260784, -0.254855, -0.248917, -0.24297, -0.237013, -0.231048, -0.225073, -0.219091, -0.2131, -0.207101, -0.201094, -0.19508, -0.189058, -0.183029, -0.176993, -0.170951, -0.164902, -0.158847, -0.152786, -0.14672, -0.140647, -0.13457, -0.128487, -0.1224, -0.116308, -0.110211, -0.104111, -0.098006, -0.0918978, -0.0857861, -0.0796712, -0.0735533, -0.0674327, -0.0613095, -0.055184, -0.0490564, -0.0429269, -0.0367959, -0.0306634, -0.0245298, -0.0183953, -0.0122601, -0.00612445, 1.1456e-05, 0.00614736, 0.012283, 0.0184182, 0.0245528, 0.0306863, 0.0368188, 0.0429498, 0.0490793, 0.0552068, 0.0613323, 0.0674555, 0.0735762, 0.0796941, 0.085809, 0.0919206, 0.0980288, 0.104133, 0.110234, 0.11633, 0.122422, 0.12851, 0.134592, 0.14067, 0.146742, 0.152809, 0.15887, 0.164925, 0.170974, 0.177016, 0.183052, 0.18908, 0.195102, 0.201116, 0.207123, 0.213122, 0.219113, 0.225096, 0.23107, 0.237035, 0.242992, 0.248939, 0.254877, 0.260806, 0.266725, 0.272633, 0.278531, 0.284419, 0.290296, 0.296163, 0.302018, 0.307861, 0.313693, 0.319514, 0.325322, 0.331118, 0.336902, 0.342672, 0.34843, 0.354175, 0.359907, 0.365625, 0.371329, 0.377019, 0.382695, 0.388357, 0.394004, 0.399636, 0.405253, 0.410855, 0.416441, 0.422012, 0.427567, 0.433105, 0.438628, 0.444134, 0.449623, 0.455095, 0.46055, 0.465988, 0.471408, 0.476811, 0.482195, 0.487561, 0.492909, 0.498239, 0.50355, 0.508841, 0.514114, 0.519367, 0.524601, 0.529815, 0.535009, 0.540182, 0.545336, 0.550469, 0.555581, 0.560672, 0.565743, 0.570792, 0.575819, 0.580825, 0.585809, 0.59077, 0.59571, 0.600627, 0.605522, 0.610393, 0.615242, 0.620068, 0.62487, 0.629649, 0.634404, 0.639135, 0.643842, 0.648525, 0.653183, 0.657817, 0.662426, 0.66701, 0.671569, 0.676103, 0.680611, 0.685094, 0.68955, 0.693981, 0.698386, 0.702764, 0.707116, 0.711442, 0.71574, 0.720012, 0.724257, 0.728474, 0.732664, 0.736826, 0.74096, 0.745067, 0.749146, 0.753196, 0.757218, 0.761211, 0.765176, 0.769112, 0.773019, 0.776897, 0.780746, 0.784565, 0.788355, 0.792115, 0.795845, 0.799546, 0.803216, 0.806856, 0.810465, 0.814045, 0.817593, 0.821111, 0.824597, 0.828053, 0.831478, 0.834871, 0.838233, 0.841563, 0.844861, 0.848128, 0.851363, 0.854565, 0.857736, 0.860874, 0.86398, 0.867053, 0.870094, 0.873102, 0.876077, 0.879019, 0.881928, 0.884804, 0.887646, 0.890455, 0.893231, 0.895973, 0.898681, 0.901355, 0.903996, 0.906602, 0.909174, 0.911712, 0.914216, 0.916685, 0.91912, 0.92152, 0.923885, 0.926216, 0.928512, 0.930772, 0.932998, 0.935189, 0.937344, 0.939464, 0.941549, 0.943598, 0.945612, 0.94759, 0.949533, 0.95144, 0.953311, 0.955146, 0.956945, 0.958708, 0.960435, 0.962126, 0.96378, 0.965398, 0.96698, 0.968526, 0.970035, 0.971507, 0.972943, 0.974343, 0.975706, 0.977031, 0.978321, 0.979573, 0.980788, 0.981967, 0.983108, 0.984213, 0.98528, 0.986311, 0.987304, 0.98826, 0.989179, 0.99006, 0.990905, 0.991712, 0.992481, 0.993214, 0.993909, 0.994566, 0.995186, 0.995769, 0.996314, 0.996822, 0.997292, 0.997724, 0.998119, 0.998476, 0.998796, 0.999078, 0.999323, 0.99953, 0.999699, 0.999831, 0.999925, 0.999981};

typedef struct Parameters{
    float freqX;
    float freqY;
    float ampX;
    float ampY;
    float offsetX;
    float offsetY;
    float dummy1;
    float dummy2;
} Parameters;

int wrap(int target, int operand){
    if(operand == 0)
        return 0;
	while(target < 0)
		target += operand;
	while(target > operand)
		target -= operand;
	return target;
}

float cosineInterpolation(float a, float b, float x){
    float ft = x * 512;
    float f = (1.0 - cosTable[int(ft)]) * 0.5;
    return  a*(1-f) + b*f;
}

float cosineInterpolation2d(float v1, float v2, float v3, float v4, float x, float y){
    return cosineInterpolation(cosineInterpolation(v1, v2, x),
                               cosineInterpolation(v3, v4, x),
                               y);
}


__kernel void update( __global Parameters* parameters,
                     __global float *randomTable,
                     __global float *vertices){ // 1024 * 768
    int x = get_global_id(0);
    int y = get_global_id(1);
    float value = 0.0;
    
    for(int i = 0; i < gNumGenerators; i ++){
        // shift starting point of random table 
        int ox = (x + (int)(parameters[i].offsetX));
        int oy = (y + (int)(parameters[i].offsetY));
        // scale with frequency parameter
        float vx = (float)ox * (parameters[i].freqX / (float)gWindowWidth);
        float vy = (float)oy * (parameters[i].freqY / (float)gWindowHeight);
        
        // truncate
        int ix = (int)vx;
        int iy = (int)vy;
        // interpolation factor
        float factorX = fabs(vx - (float)ix);
        float factorY = fabs(vy - (float)iy);
        
        ix = wrap(ix, gWindowWidth);
        iy = wrap(iy, gWindowHeight);
        
        // neighbor pixel
        int nx = wrap(ix+1, gWindowWidth );
        int ny = wrap(iy+1, gWindowHeight );
        
        // get values of four pixels
        float v1 = randomTable[iy * gWindowWidth + ix]* parameters[i].ampX;
        float v2 = randomTable[iy * gWindowWidth + nx]* parameters[i].ampX;
        float v3 = randomTable[ny * gWindowWidth + ix]* parameters[i].ampY;
        float v4 = randomTable[ny * gWindowWidth + nx]* parameters[i].ampY;
        
        // interpolate four values
        value += cosineInterpolation2d(v1, v2, v3, v4, factorX, factorY );

    }
    int index = (y * gWindowWidth + x);
    vertices[index*3+2] = value;

}